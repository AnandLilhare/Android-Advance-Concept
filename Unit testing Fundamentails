Unit testing Fundamentails

testImplementation 'junit:junit:4.13.2'
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "com.google.truth.extensions:truth-java8-extension:1.1.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0


Test Doubles

1. Fakes
   A Fake is a light weight implementation class of interface, usually we hands code fake classes.

2. Stubes
   A stubes is an object that provide predefined answere to method calls

3. Mockes
   It is simillar to stubes, but they allow to tester to set answere to method call when writing test case.


Mockito
testImplementation 'org.mockito:mockito-core:2.28.2'

 @get:Rule
    var instantTaskExecutorRule = InstantTaskExecutorRule()

 This rules run all related architected background job in same thread.

 

Testing Room database

1. To test room database need to implement dependancy 
  androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

2. This will run test case with android component that why need to add anotation
    @RunWith(AndroidJUnit4::class)

3. For testing room data base there will inMemoryDatabaseBuilder tempary database, it will be remove the entry and table after app clean.
database = Room.inMemoryDatabaseBuilder(
         ApplicationProvider.getApplicationContext(),
         TMDBDatabase::class.java
     ).build()



Test Live data
1. Implement test cases for live data below dependancy need to intergrate
testImplementation "org.robolectric:robolectric:4.4"  it will provide simualated data to test

2. To test Live date need to create LiveDataTestUtil.kt extension function

package com.anushka.tmdbclient

import androidx.annotation.VisibleForTesting
import androidx.lifecycle.LiveData
import androidx.lifecycle.Observer
import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.TimeoutException


@VisibleForTesting(otherwise = VisibleForTesting.NONE)
fun <T> LiveData<T>.getOrAwaitValue(
    time: Long = 2,
    timeUnit: TimeUnit = TimeUnit.SECONDS,
    afterObserve: () -> Unit = {}
): T {
    var data: T? = null
    val latch = CountDownLatch(1)
    val observer = object : Observer<T> {
        override fun onChanged(o: T?) {
            data = o
            latch.countDown()
            this@getOrAwaitValue.removeObserver(this)
        }
    }
    this.observeForever(observer)

    try {
        afterObserve.invoke()

        // Don't wait indefinitely if the LiveData is not set.
        if (!latch.await(time, timeUnit)) {
            throw TimeoutException("LiveData value was never set.")
        }

    } finally {
        this.removeObserver(observer)
    }

    @Suppress("UNCHECKED_CAST")
    return data as T
}
