Kotlin Flow

In coroutines, a flow is a type that can emit multiple values sequentially, as opposed to suspend functions that return only a single value. For example, you can use a flow to receive live updates from a database.

Flows are built on top of coroutines and can provide multiple values. A flow is conceptually a stream of data that can be computed asynchronously. The emitted values must be of the same type. For example, a Flow<Int> is a flow that emits integer values.

A flow is very similar to an Iterator that produces a sequence of values, but it uses suspend functions to produce and consume values asynchronously.

There are three entities involved in streams of data:

- A producer produces data that is added to the stream. Thanks to coroutines, flows can also produce data asynchronously.

- (Optional) Intermediaries can modify each value emitted into the stream or the stream itself.

- A consumer consumes the values from the stream.

Creating a flow:
1. To create flows, use the flow builder APIs. The flow builder function creates a new flow where you can manually emit new values into the stream of data using the emit function.

2. The flow builder is executed within a coroutine. Thus, it benefits from the same asynchronous APIs, but some restrictions apply:

    - Flows are sequential. As the producer is in a coroutine, when calling a suspend function, the producer suspends until the suspend function returns. In the example, the producer suspends until the fetchLatestNews network request completes. Only then is the result emitted to the stream.
    - With the flow builder, the producer cannot emit values from a different CoroutineContext. Therefore, don't call emit in a different CoroutineContext by creating new coroutines or by using withContext blocks of code. You can use other flow builders such as callbackFlow in these cases.

 Modifying the stream
 Intermediaries can use intermediate operators to modify the stream of data without consuming the values. These operators are functions that, when applied to a stream of data, set up a chain of operations that aren't executed until the values are consumed in the future.

 Collecting from a flow
 - se a terminal operator to trigger the flow to start listening for values. To get all the values in the stream as they're emitted, use collect

 - As collect is a suspend function, it needs to be executed within a coroutine. It takes a lambda as a parameter that is called on every new value. Since it's a suspend function, the coroutine that calls collect may suspend until the flow is closed.

 StateFlow and SharedFlow
 - StateFlow and SharedFlow are Flow APIs that enable flows to optimally emit state updates and emit values to multiple consumers.

State Flow:
- StateFlow is a state-holder observable flow that emits the current and new state updates to its collectors. The current state value can also be read through its value property. To update state and send it to the flow, assign a new value to the value property of the MutableStateFlow class.

LiveData vs StateFlow
1.LiveData does not take an inital value.So we need to check for nullabilty
2.StateFlow need to intial value. So no need to check nullablity.
3.Livedata automatically unregister the consumers, when the view goes to stopped state.
4.StateFlow does not do that default, we need to use it with lifecycleScope for that
5.LiveData is part of Android Framework. So we can only use the code for Android Developement.
6.StateFlow is part of Kotlin language. SO we can use it for Kotlin Multiplatlform projects.

Making cold flows hot using shareIn

StateFlow is a hot flowâ€”it remains in memory as long as the flow is collected or while any other references to it exist from a garbage collection root. You can turn cold flows hot by using the shareIn operator.


SharedFlow:
The shareIn function returns a SharedFlow, a hot flow that emits values to all consumers that collect from it. A SharedFlow is a highly-configurable generalization of StateFlow.

