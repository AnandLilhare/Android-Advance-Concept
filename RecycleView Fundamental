RecycleView Fundamental

RecyclerView makes it easy to efficiently display large sets of data. You supply the data and define how each item looks, and the RecyclerView library dynamically creates the elements when they're needed.

As the name implies, RecyclerView recycles those individual elements. When an item scrolls off the screen, RecyclerView doesn't destroy its view. Instead, RecyclerView reuses the view for new items that have scrolled onscreen. RecyclerView improves performance and your app's responsiveness, and it reduces power consumption.


The items in your RecyclerView are arranged by a LayoutManager class. The RecyclerView library provides three layout managers, which handle the most common layout situations:

1. LinearLayoutManager - arranges the items in a one-dimensional list.
2. GridLayoutManager  - arranges the items in a two-dimensional grid
3. StaggeredGridLayoutManager  - is similar to GridLayoutManager, but it does not require that items in a row have the same height 

Implement your adapter and view holder
Once you determine your layout, you need to implement your Adapter and ViewHolder. These two classes work together to define how your data is displayed. The ViewHolder is a wrapper around a View that contains the layout for an individual item in the list. The Adapter creates ViewHolder objects as needed and also sets the data for those views. The process of associating views to their data is called binding.

When you define your adapter, you override three key methods:
1. onCreateViewHolder(): RecyclerView calls this method whenever it needs to create a new ViewHolder.
2. onBindViewHolder(): RecyclerView calls this method to associate a ViewHolder with data. The method fetches the appropriate data and uses the data to fill in the view holder's layout
3. getItemCount(): RecyclerView calls this method to get the size of the dataset.

