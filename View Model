View Model
1. It exposes the state to the UI and encapsulates related business logic. 
2. Its principal advantage is that it caches state and persists it through configuration changes.

Sope:
When you instantiate a ViewModel, you pass it an object that implements the ViewModelStoreOwner interface. 
This may be a Navigation destination, Navigation graph, activity, fragment, or any other type that implements the interface. 
Your ViewModel is then scoped to the Lifecycle of the ViewModelStoreOwner. It remains in memory until its ViewModelStoreOwner goes away permanently.

A range of classes are either direct or indirect subclasses of the ViewModelStoreOwner interface. The direct subclasses are ComponentActivity, Fragment, and NavBackStackEntry. 
For a full list of indirect subclasses, see the ViewModelStoreOwner reference.


To integrate View Model
1.Add dependency to gradle file
 def lifecycle_version = "2.6.0"
   // ViewModel
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
  // LiveData
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

2. Create a class that extend ViewModel class
   ex. MainActivityViewModel : ViewModel()
3. Create a instance of ViewModel class
   ex:private lateinit var viewModel: MainActivityViewModel
4. Intialize the ViewModel instance 
   ex:viewModel = ViewModelProvider(this).get(MainActivityViewModel::class.java)
5. Invoke viewmodel method 
   ex: viewModel.getCurrentCount().toString()

View model factory class:
1. When you wanted to pass parameter to view model class you will need to create ViewModelFactory class
Create a ViewModelFactory.
class MainActivityViewModelFactory(private val startingTotal : Int) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(MainActivityViewModel::class.java)){
            return MainActivityViewModel(startingTotal) as T
        }
        throw IllegalArgumentException("Unknown View Model Class")
    }
}

Get an instance(object) of a ViewModel when using a ViewModelFactory.
class MainActivity : AppCompatActivity() {
    private lateinit var viewModel: MainActivityViewModel
    private lateinit var viewModelFactory: MainActivityViewModelFactory
    override fun onCreate(savedInstanceState: Bundle?) {
        .........
        viewModelFactory = MainActivityViewModelFactory(125)
        viewModel = ViewModelProvider(this,viewModelFactory).get(MainActivityViewModel::class.java)
        .........
        }
    }
}
