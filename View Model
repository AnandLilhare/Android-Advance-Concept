View Model
It exposes state to the UI and encapsulates related business logic. Its principal advantage is that it caches state and persists it through configuration changes.

Sope:
When you instantiate a ViewModel, you pass it an object that implements the ViewModelStoreOwner interface. This may be a Navigation destination, Navigation graph, activity, fragment, or any other type that implements the interface. Your ViewModel is then scoped to the Lifecycle of the ViewModelStoreOwner. It remains in memory until its ViewModelStoreOwner goes away permanently.

A range of classes are either direct or indirect subclasses of the ViewModelStoreOwner interface. The direct subclasses are ComponentActivity, Fragment, and NavBackStackEntry. For a full list of indirect subclasses, see the ViewModelStoreOwner reference.


To integrate View Model
1.Add dependency to gradle file
 def lifecycle_version = "2.6.0"
   // ViewModel
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
  // LiveData
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

2. Create a class that extend ViewModel class
   ex. MainActivityViewModel : ViewModel()
3. Create a instance of ViewModel class
   ex:private lateinit var viewModel: MainActivityViewModel
4. Intialize the ViewModel instance 
   ex:viewModel = ViewModelProvider(this).get(MainActivityViewModel::class.java)
5. Invoke viewmodel method 
   ex: viewModel.getCurrentCount().toString()


View model factory class:

1. When you wanted to pass parameter to view model class you will need to create ViewModelFactory class
Create a ViewModelFactory.


class MainActivityViewModelFactory(private val startingTotal : Int) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(MainActivityViewModel::class.java)){
            return MainActivityViewModel(startingTotal) as T
        }
        throw IllegalArgumentException("Unknown View Model Class")
    }
}


Get an instance(object) of a ViewModel when using a ViewModelFactory.
class MainActivity : AppCompatActivity() {
    private lateinit var viewModel: MainActivityViewModel
    private lateinit var viewModelFactory: MainActivityViewModelFactory
    override fun onCreate(savedInstanceState: Bundle?) {
        .........
        viewModelFactory = MainActivityViewModelFactory(125)
        viewModel = ViewModelProvider(this,viewModelFactory).get(MainActivityViewModel::class.java)
        .........
        }
    }
}
Frequently Asked Questions.
Q. When is the ViewModel's onCleared() called?

A ViewModel's onCleared() is called when the ViewModel is no longer required.

It will be called when the app is put into the background and the app process is killed in order to free up the system's memory.

When the user invokes finish() of an activity, its view model will be cleared(). Also when we click on the back button,  ViewModel of current activity will be cleared (onCleared()  will be invoked)

Q.What is the difference between ViewModel() and AndroidViewModel() ?
The AndroidViewModel class extends ViewModel class, so it has all the same functionality.

The only added functionality for AndroidViewModel is that it is context aware, when initialising AndroidViewModel we have to pass the application context as a parameter.

AndroidViewModel is helpful if we require context to get a system service or have a similar requirement(displaying a Toast message).

class MyAnViewModel(application: Application) : AndroidViewModel(application) {
   ........
   ........
}

2) What is "ViewModelProvider" ?
We can not construct a ViewModel instance on our own. We need to use the ViewModelProvider utility provided by Android to create instances of ViewModels.

3) When do we need to create a ViewModelFactory class ?
ViewModelProvider can only instantiate ViewModels with no arg constructors.

So, if the ViewModel has constructor parameters(arguments) , ViewModelProvider need a little extra support to create instances of it.

We provide that extra support by creating a Factory class and passing its instance to the ViewModelProvider.

4) When we are extending AndroidViewModel, since it should always has "application" as a constructor parameter, do we need to use a ViewModelFactory ?
No, if the ViewModel created extending AndroidViewModel, does not have parameters other than "application", we do not need to use a ViewModelFactory for that.

5) What is the onCleared() function of a ViewModel?
  When a ViewModel object is no longer required, system will call to its onCleared() function to destroy(clear) it.

   It will be called when the app is put into the background and the app process is killed in order to free up the     

   system's memory.

   When the user invokes finish() of an activity, its view model will be cleared().

   Also when we click on the back button, ViewModel of current activity will be cleared (onCleared() will be invoked)