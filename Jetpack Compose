Jetpack Compose:
It simplifes and significantly accelerates UI development on Android using the declarative approach.


https://appdevnotes.com/complete-jetpack-compose-tutorial-for-beginners/

https://developer.android.com/jetpack/androidx/releases/compose-kotlin

https://developer.android.com/jetpack/compose/documentation

In Jetpack Compose, there are 3 simple ways to arrange user interface elements

Box: Box()can contain one or more childern, it belongs to the androidx.compose.foundation.layout package. They are positioned inside the box accroding to the content Alignment parameter.

Row:
1. HorizontalArrangement: there is six type of vertical arragement
2. VerticalAlignment: there is three horixontal Alignment.

Column:
1. VerticalArragment: there is six type of vertical arragement
2. horizontalAlignment: there is three horixontal Alignment.



General Note:

- modifier: Modifiers are a key technique in jetpack compose to influence both the lokks and behaviour of composable function.

- Recompostion: Certain type trigger a so-called recompostion.
- To use the Compose preview, your composable function must containe an additional annotation, @Preview.
- To render composables, your acitivy must extend either ComponentActivity or another class that has ComponentActivity as its direct or indirect ancestor.
-This is an inportant differernce; while Composes app invoke setContent(), View-based app call setContentView 

Componet Base View(Imperative)
JetPack Compose marks a fundamentals shift in Android UI development. While the traditional view-based approach(Imperative) is centered around components and classes, new framework follows as declarative approach.
  1. The root of all classed in java is java. lang.Object
  2. android.view.View is the root of all Android UI elements
  3. All components that position and size their children extend android.view.ViewGroup

-----------------
Composing UIs


- Row() : Content horizontally
- Column(): Content Vertically 
- Box(): It is simillar to FramLayout. It organizes its content in the order it appears in code. The positin inside the box is controlled by contentAlignment
- modifier = Modifier. : The root of such a chain is the Modifier companion object.
-background() : this modifier allows you to set a background color for any composable function

Exploring the Key Principles of Compose

A composable function is a Kotlin function that has been annotated with @Composable.
The name of a composable function uses the PascalCase notation. it starts with uppercase letter, wherea the remaining character are lowecase.
The name should be noun.
Composable function emit UI elements.
Layout(): It is belong to the androidx.compose.ui.layout package. It is the core composable function for the layout.

When we speak of composable functions emitting UI elements, we mean that nodes are added to data structures that are internal part of Jeptack compose. This will eventually lead to UI elements being visible.
Composing and recomposing the UI
Unlike imperative UI frameworks, Jetpack compose does not depend on the deveploer proactively modifying a component tree when change in the app data repquire change to be made to the UI. Instead, Jeptack compose detects such changes on its own and update only the affected part.

Sharing state among conposable functions
If that data is modified inside the composable, you should use MutableState. 
Moving state to a composable's caller by receiving a state is called state hoisting
BoxWithConstraints(): A composable that defines its own content according to the available space, based on the incoming constraints or the current LayoutDirection
Modifier.width(min(400.dp, maxWidth)) : The width of the column is either 400 density-independent pixels or maxWidth, depending on which value is smaller

Exploring the key principles of compose.

Composable function emit UI elements.
Layout() belong to the androidx.compose.ui.layout package. It is the core composable function for the layout, with its purpose being to size and position.
When we speak of composable functions emitting the UI elements, we mean that nodes are added to data structure that are internal to jetpack compose. This will eventully lead to UI elements being visiable.
Composable side effect: Try to make your composable side effect-free. Having no side effect means calling a function repeatedly with same set of arguments that will always produce the same result. Besides getting all the relevant data from the caller, being free of side effect also reuires not relying on global properties or calling function that return upredicatable value.
Modifier: Modifer is both an interface and a Companion object.
background(): background() is an extension functon of Modifier.

ContstraintLayout() - it use a domain-specific language(DSL) to define the localion and size of a UI element relative to other ons. Therefore each composable in a ConstraintLayout must have a refenece associated with it, which is createRefs().
- Constraints are provide using the constrainAs modifier.
- Its lambda expression receives a ConstrainScope. It includes proper ties such as start, top, and bottom. These are called anchors becaouse they define a locatio that can be linked(using linkTO())
to the location of another composable.


Managing the State of your Composable Function:

1. State: State as data that can change over the time.
2. The androidx.compose.runtime.State base interface defines a value holder an object that stores a value of a particular type in a property name value.
3. Internally the current RecomposeScope interface will be subscribed to change of that value.
4. State must be an implementation of MustableState.
5. The easiest way to create State instance is to invoke mutableStateOf(). This function returns a new MutableState instance.
6. We can change the value of val type variable because num holds the reference to a mutable value holder.
remember is inline function.
7.You can pass any number of keys to remember {}. if one of them has changed since the previous composition, the calculation is reevaluated, and the new value is remembered and returned.


Writing stateless composable functions
- remember {} make a composable function stateful. A stateless composable, on the other hand, doesn't hold any state.
- Following rule should follow 
   - Fast: Your composable must not do heavy(that is, time- cunsuming) computation. Never invoke a web  service or do any other I/O. Data that is used by composable should be passed to it.
   - Free of side-effects: Do not modify global properties or produce unintended observable effect (Modifying state that has been passed to a composable is certainly intentional)
-  Idempotent: Do not use remember {}, do not access global properties and do not call upredicatable code.

remember: 

Complementary() is an extension function of color.

Context in compose - To get context for compose like within the button
val context = LocalContext.current

SnackBar in JetPackCompose

There is two think require to implement snackbar
1. A Scaffold State
2. A Coroutine Scope

RecycleView in JetPackCompose
-----------------------------

1. By using Column layout
2. to scroll the list , get an instance of ScrollState.
3. Add verticalscroll modifier.

Lazy Column is use for optimised way to implement List
 

Recompostion:
1. In order to recompostion happened change of the stat must be obserable compose.
2. We can do by Mutable state, Live date and RxJava or Flow
   val count = mutableStateOf(0)
   count.value = count.value+1

State Hoisting
https://developer.android.com/jetpack/compose/state-hoisting

rememberSaveable: It is use for persist the date to clear whent rotating and configuration change of devices
ex:var count by rememberSaveable{mutableStateOf(0)}


JetPack Compose Interview Question 











