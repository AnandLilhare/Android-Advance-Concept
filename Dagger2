
Dagger2

Dagger2 has three concept

1. @Inject : It tell dagger to which object to inject
2. @Module : how to create object which we want to inject object
3. @Component: Which link togather 


@Inject annotation:
1. In order to build the application graph automatically for us, Dagger needs to know how to create instances for the classes in the graph. One way to do this is by annotating the constructor of classes with @Inject. The constructor parameters will be the dependencies of that type.

2.In Kotlin, to apply an annotation to the constructor, you need to specifically add the keyword constructor and introduce the annotation just before i

@Component annotation:
1. We want Dagger to create the graph of dependencies of our project, manage them for us and be able to get dependencies from the graph. To make Dagger do it, we need to create an interface and annotate it with @Component. Dagger will create a Container as we would have done with manual dependency injection.

2. An interface annotated with @Component will make Dagger generate code with all the dependencies required to satisfy the parameters of the methods it exposes. Inside that interface.

3. A @Component interface gives the information Dagger needs to generate the graph at compile-time. The parameter of the interface methods define what classes request injection.

@Module annotation:

1. Similar to Components, Dagger Modules tell Dagger how to provide instances of a certain type. Dependencies are defined using the @Provides and @Binds annotations.

@Binds annotation:
1. Use @Binds to tell Dagger which implementation it needs to use when providing an interface.

2.@Binds must annotate an abstract function. The return type of the abstract function is the interface we want to provide an implementation for (i.e. Storage). The implementation is specified by adding a parameter with the interface implementation type (i.e. SharedPreferencesStorage).

3. We're declaring an interface annotated with @Component.Factory. Inside, there's a method that returns the component type (i.e. AppComponent) and has a parameter of type Context annotated with @BindsInstance.

4. @BindsInstance tells Dagger that it needs to add that instance in the graph and whenever Context is required, provide that instance.


Scope:
Use Scopes to have a unique instance of a type in a Component. This is what is also called "to scope a type to the Component's lifecycle". Scoping a type to a Component means that the same instance of that type will be used every time the type needs to be provided

1. @Singletone : If we annotate a Component with @Singleton, all the classes also annotated with @Singleton will be scoped to its lifetime.


Subcomponents:

1. An Activity injects Dagger in the onCreate method before calling super.

2. A Fragment injects Dagger in the onAttach method after calling super.

The way to tell Dagger that we want a new Component to use part of another Component is with Dagger Subcomponents.

Subcomponents are components that inherit and extend the object graph of a parent component. Thus, all objects provided in the parent component will be provided in the subcomponent too. In this way, an object from a subcomponent can depend on an object provided by the parent component

Scoping Subcomponents:

Scoping rules:

1. When a type is marked with a scope annotation, it can only be used by Components that are annotated with the same scope.
2. When a Component is marked with a scope annotation, it can only provide types with that annotation or types that have no annotation.
3. A subcomponent cannot use a scope annotation used by one of its parent Components.
Components also involve subcomponents in this context.

Provides annotation and Qualifiers
@Provides:

Apart from the @Inject and @Binds annotations, you can use @Provides to tell Dagger how to provide an instance of a class inside a Dagger module.

The return type of the @Provides function (it doesn't matter how it's called) tells Dagger what type is added to the graph. The parameters of that function are the dependencies that Dagger needs to satisfy before providing an instance of that type.

Qualifiers:
Qualifiers are useful when you want to add different implementations of the same type to the Dagger graph.


