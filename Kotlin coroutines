Kotlin coroutines


A coroutine is a concurrency design pattern that you can use on Android to simplify code that executes asynchronously. Coroutines were added to Kotlin in version 1.3 and are based on established concepts from other languages.

Features
Coroutines is our recommended solution for asynchronous programming on Android. Noteworthy features include the following:

1. Lightweight: 
2. Fewer memory leaks:
3. Built-in cancellation support:
4. Jetpack integration:

Implementation corotines:

1. add the following dependency to your app's build.gradle file:
dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
}

2.Now create coroutones scope that will provide coroutine scope.
CoroutineScope(Dispatchers.IO).launch {
                
            }

Coroutines concepts: 

CoroutineScope: is an interface to provide scope to corotine. In kotlin coroutin there is another scope is Golbal scope which are working in whole application lifecycle.A CoroutineScope keeps track of any coroutine it creates using launch or async. The ongoing work (i.e. the running coroutines) can be cancelled by calling scope.cancel() at any point in time.

viewModelScope:
viewModelScope, the ViewModel class cancels the scope automatically for you in the ViewModel's onCleared() method.


Dispatcher:
Kotlin coroutines use dispatchers to determine which threads are used for coroutine execution. To run code outside of the main thread, you can tell Kotlin coroutines to perform work on either the Default or IO dispatcher. In Kotlin, all coroutines must run in a dispatcher, even when they're running on the main thread. Coroutines can suspend themselves, and the dispatcher is responsible for resuming them.
 
Dispatcher.io is context of coroutine, it decripe the kind of thread that they run on coroutines.
Dispatchers.IO indicates that this coroutine should be executed on a thread reserved for I/O operations.

To specify where the coroutines should run, Kotlin provides three dispatchers that you can use:

1.Dispatchers.io : Coroutin will run in background thread from a shared pool of on-demand created thread.
This dispatcher is optimized to perform disk or network I/O outside of the main thread. Examples include using the Room component, reading from or writing to files, and running any network operations.

2.Dispatchers.Main: Use this dispatcher to run a coroutine on the main Android thread. This should be used only for interacting with the UI and performing quick work. Examples include calling suspend functions, running Android UI framework operations, and updating LiveData objects.

3.Dispatchers.Default: it is use for CPU intensive task such as sorting a large list.
This dispatcher is optimized to perform CPU-intensive work outside of the main thread. Example use cases include sorting a list and parsing JSON.

4.Dispatchers.Unconfined: this is use for Golbal scope, it'll run in the current thread, but if it is suspended and resumed it will run suspended function's thread.

3. launch is builder to start coroutine.
  launch is a function that creates a coroutine and dispatches the execution of its function body to the corresponding dispatcher.

  There are four builder
  a. lunch : it is launch new coroutine without blocking the current thread. We use this builder when coroutine does not return any value.Any work that is considered "fire and forget" can be started using launch.
  b. async: it is launch new coroutine without blocking the current thread. it is return an instance of deferred value. We use this builder when coroutine does have return any value.starts a new coroutine and allows you to return a result with a suspend function called await.
  c. produce: This builder is for coroutine which produces a stream of element. Returns of instances of receive channel.
  d. runBlocking: The coroutine we create using this thread will block the thread while the coroutine is executing.
     Returns a result of type T.

 Structured Concurrency

 It is set of language feature and best practiesed introduce for kotlin coroutine to avoid leak and to manage them productively.

 Switch The Thread Of A Coroutin
 private suspend fun downloadUserData() {
        for (i in 1..200000) {
            withContext(Dispatchers.Main){
                tvUserMessage.text = "Downloading user $i in ${Thread.currentThread().name}"
            }
        }

Coroutin Suspend fuction

In Kotlin Corountinew, whenever a coroutin is suspended, the current stack fram of the function is copied and saved in the memory. 
When the function resumes after completing its task, the stack frame is copie back from where it was saved and starts running again.

Kotlin uses a stack frame to manage which function is running along with any local variables. When suspending a coroutine, the current stack frame is copied and saved for later. When resuming, the stack frame is copied back from where it was saved, and the function starts running again. Even though the code might look like an ordinary sequential blocking request, the coroutine ensures that the network request avoids blocking the main thread.

Suspending Fuction.
1. WithContext
2. WithTimeout
3. WithTimeoutOrNull
4. join
5. delay
6. wait
7. supervisorScope
8. coroutineScope

If we are going to use a suspending function such as withContext, we have to mark our calling function with suspend modifier.

Async and Wait:
CoroutineScope(Dispatchers.Main).launch {
            Log.i("MyTag","Calculation started....")

            val stock1 = async(Dispatchers.IO) {
                getStock1()
            }
            val stock2 = async(Dispatchers.IO) {
                getStock2()
            }

            val total = stock1.await()+stock2.await()
            Toast.makeText(applicationContext,"Total is $total", Toast.LENGTH_LONG).show()
 
        }
Unstructured Concurrency 

1. Unstructure concurrency does not guarantee to competete all the task of the suspending function before it return.
2. There is no way to handle expection in the unstructure concurrency.

Structured Concurrency
Structured Concurrency gaurantees to complete all the work started by corountines within the child scope before the returen of the supending the function.
1. By using the coroutineScope suspending function, it is resolving the above two unstructrued issue.
2. Structure concurrency help us to keep track of the task we started and cancel them when needed.

ViewModelScope in Coroutine
it is a CorotineScope ties with ViewModel.
LifecycleScope : it is use in activity and framgent to work with lifecycle of acitivity and fragment.

Live Data Builder

var users = liveData(Dispatchers.IO) {
        val result = usersRepository.getUsers()
        emit(result)
    }
you can use coroutins as Live date 

--------------------------------------------------------------------------------------------------------------
CoroutineScope: A CoroutineScope is a context that enforces cancellation and other rules to its children and their children recursively.
Functions used to create new coroutines such as launch() and async() extend CoroutineScope.

Dispatcher: A Dispatcher manages which backing thread the coroutine will use for its execution, removing the responsibility of when and where to use a new thread from the developer.
Determines the thread the coroutine will use. The Main dispatcher will always run coroutines on the main thread, while dispatchers like Default, IO, or Unconfined will use other threads.

Global Scope:he GlobalScope allows any coroutines in it to run as long as the app is running. For the reasons we talked about concerning the main thread, this is not recommended outside example code. When you use coroutines in your apps, we will use other scopes.

launch(): The launch() function creates a coroutine from the enclosed code wrapped in a cancelable Job object. launch() is used when a return value is not needed outside the confines of the coroutine.

runBlocking:The next examples will use runBlocking(), which as the name implies, starts a new coroutine and blocks the current thread until completion. It is mainly used to bridge between blocking and non-blocking code in main functions and tests. You will not be using it often in typical Android code.

When to mark functions as suspend
- Whenever a function calls another suspend function, then it should also be a suspend function.











        
