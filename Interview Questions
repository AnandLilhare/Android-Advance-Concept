



Interview Questions

Data Binding
-----------
1) Can I use findViewById() for all my Android Projects?
    Yes you can, you can build any Android Project using findViewById(). That's what we had been doing during the early days of  Android.

Using modern ways we can reduce the number of code lines, make code more readable, improve the performances and make code base more organised.



2) What is Kotlin Synthetic?
   Kotlin Synthetic(extensions) was a shorthand way used by developers to avoid findViewById() and directly call to the views using their ids. We added a Kotlin plugin for that in the app level gradle file. Since this method caused a lot of unexpected errors, Google deprecated it in 2021.



3) What is ViewBinding?
View Binding is a light weight version of Data binding. It only binds views to the code.

But data binding do both. Binding data  from code to views and binding views to the code. And data binding has a lot of other applications.

Once you learnt Data Binding, View Binding would be much easier to learn(nothing new at all).

Considering our project's requirements we should decide whether or not use Data Binding(or View Binding)

During later sections of this course, we will discuss about view binding and we will use view binding for our complete project examples.



4) What is Jetpack Compose?
With jetpack compose we do not need to use XML. We write all the codes to create views using Kotlin.

But, you need a very good(Advanced Level) Kotlin and Android development knowledge to use Jetpack Compose.

XML is much quicker to use(drag and drop, attributes window,..) and easier to learn/understand.

Jetpack compose has very high performance and lot of other advantages(Kotlin Multiplatform)

We can use both XML and Compose in the same project.

There are millions of Android Projects created using XML(which need continuous maintenance) . Only some developers use Compose for their new projects. So, as an Android Developer you need to master both XML way and Compose way.

I have added a lot of sections to this course to teach you jetpack compose fundamentals as well as practical applications. You will be able to master jetpack compose during later sections of this course.

View Model:
5. When is the ViewModel's onCleared() called?
A ViewModel's onCleared() is called when the ViewModel is no longer required.
It will be called when the app is put into the background and the app process is killed in order to free up the system's memory.
When the user invokes finish() of an activity, its view model will be cleared(). Also when we click on the back button,  ViewModel of current activity will be cleared (onCleared()  will be invoked)

Q.What is the difference between ViewModel() and AndroidViewModel() ?
The AndroidViewModel class extends ViewModel class, so it has all the same functionality.
The only added functionality for AndroidViewModel is that it is context aware, when initialising AndroidViewModel we have to pass the application context as a parameter.
AndroidViewModel is helpful if we require context to get a system service or have a similar requirement(displaying a Toast message).

class MyAnViewModel(application: Application) : AndroidViewModel(application) {
   ........
   ........
}

6) What is "ViewModelProvider" ?
We can not construct a ViewModel instance on our own. We need to use the ViewModelProvider utility provided by Android to create instances of ViewModels.

7) When do we need to create a ViewModelFactory class ?
ViewModelProvider can only instantiate ViewModels with no arg constructors.
So, if the ViewModel has constructor parameters(arguments) , ViewModelProvider need a little extra support to create instances of it.
We provide that extra support by creating a Factory class and passing its instance to the ViewModelProvider.

8) When we are extending AndroidViewModel, since it should always has "application" as a constructor parameter, do we need to use a ViewModelFactory ?
No, if the ViewModel created extending AndroidViewModel, does not have parameters other than "application", we do not need to use a ViewModelFactory for that.

9) What is the onCleared() function of a ViewModel?
  When a ViewModel object is no longer required, system will call to its onCleared() function to destroy(clear) it.
  It will be called when the app is put into the background and the app process is killed in order to free up the     
  system's memory.
 When the user invokes finish() of an activity, its view model will be cleared().
Also when we click on the back button, ViewModel of current activity will be cleared (onCleared() will be invoked)

Live Data
-------------
10) Where do we create/generate LiveData?
We usually define LiveData, inside ViewModel classes.
Also, supporting libraries like Room and Retrofit allows us to get data directly in LiveData format.

11)From where do we observe LiveData?
LiveData is a lifecycle-aware observable data holder class.
In android we have only 3 app components with lifecycles. Activities , fragments and services.
So, form activities, fragments and services we can observe LiveData.

12)What is the difference between RxJava and LiveData?
RxJava is not a lifecycle aware component.
So, data stream does not go off, when activity, fragment or service becomes inactive.
As a result of that, memory leaks or crashes can happen.
Therefore, we have to write codes to dispose them manually.
But, on the other hand, Android LiveData aware of lifecycle status changes.
And, they clean up themselves(stop emitting data) when their associated lifecycle is destroyed.

13)What is MutableLiveData, what is the difference between LiveData and MutableLiveData ?
MutableLiveData class is a subclass of LiveData class. In other words, MutableLiveData child class has created by extending the parent LiveData class.
A MutableLiveData instance can do everything a LiveData instnce can do and more.
Data in a LiveData object are only readable. We cannot update those values.
But, in the other hand, a Mutable LiveData object allows us to change(update) its values.
So, When we are creating our own live data(mostly in ViewModels), we define them as MutableLiveData.
But, when we are getting live data from other libraries such as Room and Retrofit we get them as LiveData.
We can easily transfer values between those two formats.

------------
RecyclerView

1. How does a RecyclerView differ from a ListView?
A RecyclerView is a more advanced and flexible version of a ListView. While a ListView simply displays a list of items, a RecyclerView can also be used to implement more complex lists, such as grids and staggered lists. Additionally, a RecyclerView is more efficient than a ListView, as it uses a ViewHolder to recycle views instead of creating new views for each item in the list.

2. Can you give me some examples of where RecyclerViews can be used in real-world apps?
RecyclerViews are commonly used in apps that need to display lists of data. This could be a list of items for sale in an ecommerce app, a list of articles in a news app, or a list of friends in a social media app. RecyclerViews are also often used in conjunction with other ViewGroup objects, like SwipeRefreshLayout, to provide a complete user interface.

3. What are the three main components that make up a RecyclerView?
The three main components that make up a RecyclerView are the LayoutManager, the RecyclerView.Adapter, and the RecyclerView.ViewHolder. The LayoutManager is responsible for managing the layout of the items in the RecyclerView, the RecyclerView.Adapter is responsible for managing the data that is displayed in the RecyclerView, and the RecyclerView.ViewHolder is responsible for managing the individual views that are displayed in the RecyclerView

4. In what ways do RecyclerViews improve upon ListViews?
RecyclerViews offer a number of advantages over ListViews, including the following:

-They are more flexible and customizable, allowing for a greater degree of control over how the data is displayed.
-They are more efficient, making better use of resources and reducing lag.
-They allow for more complex and sophisticated animations and interactions.

5.Can you explain how to implement a RecyclerView in Android Studio?
RecyclerView is a new widget in Android Studio that allows you to easily create scrollable lists of data. To implement a RecyclerView, you will need to first create a layout file that defines the look of each item in the list. Next, you will need to create a RecyclerView.Adapter that will bind the data to the RecyclerView. Finally, you will need to set the adapter on the RecyclerView.

6. What are the various types of adapters available with RecyclerViews?
There are three types of adapters available with RecyclerViews:

1. ListAdapter: This is used for displaying a list of items.
2. GridAdapter: This is used for displaying items in a grid layout.
3. StaggeredGridAdapter: This is used for displaying items in a staggered grid layout.

7. Whatâ€™s the difference between ViewGroups and Views?
A ViewGroup is a container that can hold other Views (and ViewGroups), whereas a View is an individual widget, like a button or a text field. ViewGroups are necessary for creating complex layouts with multiple widgets, but Views can be used on their own if you just need a single widget.

8. How would you handle a situation where an invalid position was given by getAdapterPosition() or getLayoutPosition()?
If an invalid position is given by getAdapterPosition() or getLayoutPosition(), then the RecyclerView will not be able to display the data correctly. In this case, you would need to either catch the exception that is thrown or use a try/catch block to handle the error.

9.What is an ItemDecoration? How can we add one to our RecyclerView?
An ItemDecoration is a class that allows us to add special formatting to our RecyclerView items. We can use ItemDecorations to add dividers between our items, or to add special headers or footers to our RecyclerView. To add an ItemDecoration to our RecyclerView, we simply need to create a new instance of the ItemDecoration class and add it to our RecyclerView using the addItemDecoration() method

10. When should you consider using GridLayoutManager instead of LinearLayoutManager?
GridLayoutManager is best used when you have a large number of items that need to be displayed in a grid. This is typically the case when you are displaying images, as opposed to text. LinearLayoutManager is best used when you have a small number of items that need to be displayed in a linear fashion, such as a list of text.

11. What is a LayoutManager? Why is it useful when working with RecyclerViews?
A LayoutManager is a class used by RecyclerViews to manage the positioning of items within the view. This class is responsible for measuring and positioning items within the RecyclerView, as well as determining when items need to be recycled and reused. LayoutManagers are useful when working with RecyclerViews because they help to keep the view organized and efficient, while also allowing for a great deal of flexibility in terms of how items are displayed.

12. What is the use of notifyItemInserted(), notifyItemRemoved(), etc.?
These are some of the methods available in the RecyclerView.NotifyItemInserted() is used to notify the RecyclerView that an item has been inserted at a given position. NotifyItemRemoved() is used to notify the RecyclerView that an item has been removed from a given position. There are many other methods available as well, each with a specific purpose. You can use these methods to keep your RecyclerView up-to-date with the latest data.

13 . What is the importance of setHasStableIds()? Should this always be enabled for all RecyclerViews?
The setHasStableIds() method is used to tell the RecyclerView that the items in the adapter have stable IDs. This is important for when the RecyclerView is animating changes to the data set, because it can then use those IDs to help determine which items have changed and need to be updated on screen. However, this method should not always be enabled, as it can have a negative impact on performance if the IDs are not actually stable

14.Is it possible to have multiple viewholders within a single RecyclerView?
Yes, it is possible to have multiple viewholders within a single RecyclerView. This can be useful if you want to display different types of data in the same list. For example, you could have a viewholder for text data and another for images

-------------------

ROOM Data base
1. Why is Room better then directly using SQLLite?
Ans:Because Room provides an abstraction layer over SQLite to allow fluent database access while harnessing the full power of SQLite.

2. Is room database an ORM?
Ans: The room is an ORM ( Object Relational Mapper ) for SQLite database in Android. It is part of the Architecture Components.

3.Define room in android?
Ans: Room is an ORM (object relational mapper) for SQLite database in Android. It is part of the Architecture Components released by Google. ...
Room allows you to create and manipulate database in Android more quickly. See it as an abstraction layer on top of inbuilt SQLite database.

4.How you migrate database on room?
Ans: to migrating data base 1. need to add shemas path in gradle
kapt{
            arguments{
                arg("room.schemaLocation","$projectDir/schemas")
            }
        }

 2. then need to add 
 @Database(
    entities = [Subscriber::class],
    version = 3,
    autoMigrations = [
        AutoMigration(from = 1, to = 2)
        ]
      ) in data base class
 
3. How to rename database coloumn in room?
@Database(
    entities = [Subscriber::class],
    version = 3,
    autoMigrations = [
        AutoMigration(from = 1, to = 2 , spec = SubscriberDatabase.Migration1To2::class),
        AutoMigration(from = 2, to = 3 , spec = SubscriberDatabase.Migration2To3::class)
    ]
) in database class and need to write inner class 
@RenameColumn(tableName = "subscriber_data_table", fromColumnName = "subscriber_name", toColumnName = "subs_id")
    class Migration1To2 : AutoMigrationSpec
    @RenameColumn(tableName = "subscriber_data_table", fromColumnName = "subscriber_id", toColumnName = "subscriber_name")
    class Migration2To3 : AutoMigrationSpec

----------------







